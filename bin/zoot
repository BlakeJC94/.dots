#!/bin/bash
# shellcheck shell=bash

# This is a portable script utility to deploy my dotfiles and install programs selectively
#
# TODO write install.sh to add .dots/bin to path and echo zoot --all
# TODO move all the scripts to zoot
# TODO filter input
# TODO factor out into its own repo
# TODO put deploy.sh in root of dots

# TODO change "install" to "zoot"
ZOOTROOT="${HOME}/.dots/scripts/install"

usage() {
    cat 1>&2 <<EOF
zoot
The installer for .dots

[TODO] write a bit more documentation here

USAGE:
    zoot [OPTIONS]

OPTIONS:
    -h, --help                                     Show documentation
    -l, --list                                     Show which scripts are available
    -a, --all                                      Run all install scripts
EOF
}

get_scripts() {
    local root_dir
    local stem_dir
    local name
    local scripts

    root_dir=${1}
    stem_dir=${2}
    name=${3:-*}

    scripts=$(find "${root_dir}" -name "${name}.sh" -path "*/${stem_dir}/*")
    # echo "${scripts// /\\ }" | paste -sd " "
    # TODO error if there's files with spaces
    # TODO printf
    echo "${scripts}" | paste -sd " "
}

run_scripts() {
    for script in ${*}; do
        echo "==>==> $(basename ${script}) $(whoami)"
        # bash "${script}"
    done
}

# TODO check for dead links that are meant to link to .dots and remove
link_dotfiles() {
    mkdir -pv "${HOME}"/.local/bin "${HOME}"/.local/opt

    # Get list of top level directories
    local dirs_to_set_up
    dirs_to_set_up=$( \
        find $HOME/.dots \
            -maxdepth 1 -mindepth 1 \
            -type d \
            -not \( -name 'scripts' -or name 'extras' -or -name '.*' \) \
    )
    for dir in ${dirs_to_set_up}; do
        local dir_name
        dir_name=$(basename "${dir}")
        echo "==>==> Setting up ${dir_name}"

        # Get $HOME files and dirs to link
        #   * Match files/dirs in dir that begin with '.'
        #   * Exclude dir/.config
        #   * Match files/dirs one level in dir/.config
        paths_to_link=$( \
            find ${dir}  \
                -name '.*' \
                -and -not -name '.config' \
                -or -path '*/.config/*' -prune
        )

        # Remove .dots/dir/ from source path and create symlink
        for source in ${paths_to_link}; do
            local stem_name
            stem_name=$(basename $(dirname ${source}))

            local new_stem
            new_stem=''
            if [ ${stem_name} = 'bin' ]; then
                new_stem='.local\/'
            fi

            local dest
            dest=$(echo ${source} | sed "s/\.dots\/${dir_name}\//${new_stem}/")

            if [ -L ${dest} ] ; then
                if [ -e ${dest} ] ; then
                    echo "Good link"
                else
                    echo "Broken link"
                fi
                unlink ${dest}
            elif [ -e ${dest} ] ; then
                echo "Not a link"
                mv ${dest} ${dest}.dots.bak
            else
                echo "Missing"
            fi

            ln -sf ${source} ${dest}
            # echo "DRYRUN: ln -s"  ${source} ${dest}
        done
    done
}

main() {
    local requested
    local install_all
    local list_all

    install_all=false
    list_all=false

    for arg in "$@"; do
        case "$arg" in
            --help)
                usage
                exit 0
                ;;
            --list)
                MSG="requested list"
                list_all=true
                ;;
            --all)
                MSG="requested all"
                install_all=true
                ;;
            --dots)
                link_dotfiles
                exit 0
                ;;
            *)
                if [[ "$arg" =~ ^-- ]]; then
                    requested="${requested} ${arg:2}"
                else
                    while getopts :hlad sub_arg "$arg"; do
                        case "$sub_arg" in
                            h)
                                usage
                                exit 0
                                ;;
                            l)
                                MSG="requested list"
                                list_all=true
                                ;;
                            a)
                                MSG="requested all"
                                install_all=true
                                ;;
                            d)
                                link_dotfiles
                                exit 0
                                ;;
                            *)
                                ;;
                            esac
                    done
                fi
                ;;
        esac
    done

    # MSG="${MSG} ${requested}"
    # echo "${MSG}"

    # I would need to parse all the remaining args..
    # TODO get list of scripts from user instructions
    # if --all:
    #    TODO declare what --all actually means
    # else:
    #    TODO match script names from user input
    #    TODO error if there's no matches

    # link dotfiles
    link_dotfiles

    # Install globals TODO filter
    # Exact matches? With an OR statement
    # sudo apt update && sudo apt upgrade -y
    # install_global_scripts ${requested} TODO
    local global_scripts
    global_scripts=$(get_scripts "${ZOOTROOT}" "global" "")
    if [ -n "${global_scripts}" ]; then
        echo FOO
        # sudo bash -c "$(declare -f run_scripts); run_scripts ${global_scripts}"
    fi

    # Install locals TODO filter
    local local_scripts
    local_scripts=$(get_scripts "${ZOOTROOT}" "local" "")
    if [ -n "${local_scripts}" ]; then
        echo BAR
        # bash -c "$(declare -f run_scripts); run_scripts ${local_scripts}"
    fi

    echo "==> PASS!"
    return 0
}

main "$@" || exit 1
